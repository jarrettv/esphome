#sudo docker run --rm -v "${PWD}":/config --device=/dev/ttyUSB0 -it esphome/esphome thermostat1.yaml run

substitutions:
  node_friendly_name: "Downstairs Thermostat"

esphome:
  name: thermostat1
  platform: ESP32
  board: featheresp32

logger:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

api:
  password: !secret api_password

ota:
  password: !secret ota_password

status_led:
  pin:
    number: GPIO5
    inverted: true

time:
  - platform: homeassistant
    id: esptime
    timezone: America/Chicago

i2c:
  id: i2c_bus
  frequency: 400kHz
  sda: 21
  scl: 22
  scan: True

spi:
  clk_pin: GPIO14
  mosi_pin: GPIO13
  miso_pin: GPIO12

binary_sensor:
  - platform: gpio
    id: mode_button
    internal: true
    pin:
      number: GPIO0
      inverted: true
    on_click:
      min_length: 50ms
      max_length: 500ms
      then:
        - script.execute: toggle_fan_mode
        - component.update: oled

  - platform: gpio
    id: encoder_button
    internal: true
    pin:
      number: GPIO2
      inverted: true
    on_click:
      min_length: 50ms
      max_length: 500ms
      then:
        - script.execute: toggle_mode
        - component.update: oled

sensor:
  - platform: rotary_encoder
    id: encoder
    internal: true
    pin_a: GPIO18
    pin_b: GPIO19
    on_clockwise:
      - script.execute: raise_set_temp
      - component.update: oled
    on_anticlockwise:
      - script.execute: lower_set_temp
      - component.update: oled

  # - platform: adc
  #   id: phototransistor
  #   name: ${node_friendly_name} Phototransistor ADC
  #   pin: 32
  #   attenuation: 11db
  #   update_interval: 1s
  #   filters:
  #     - sliding_window_moving_average:
  #         window_size: 5
  #         send_every: 3
  #         send_first_at: 1
  #   on_value:
  #     then:
  #       - lambda: |-
  #           const float brightness = id(phototransistor).state / 3.9;
  #           id(oled)->set_brightness(brightness);
            
  - platform: bme280
    address: 0x76
    temperature:
      id: bme280_temp
      name: ${node_friendly_name} BME280 Temperature
    humidity:
      id: bme280_humid
      name: ${node_friendly_name} BME280 Humidity
    pressure:
      id: bme280_press
      name: ${node_friendly_name} BME280 Pressure
    update_interval: 30s
    
  - platform: shtcx
    temperature:
      id: shtcx_temp
      name: ${node_friendly_name} SHTC3 Temperature
    humidity:
      id: shtcx_humid
      name: ${node_friendly_name} SHTC3 Humidity
    update_interval: 30s

font:
  # - file: "resources/Helvetica.ttf"
  #   id: font24
  #   size: 24
  - file: "resources/PressStart2P.ttf"
    id: font12
    size: 16
  - file: "resources/PressStart2P.ttf"
    id: font6
    size: 8

color:
  - id: medium_gray
    white: 50%

display:
  - platform: ssd1325_spi
    id: oled
    model: "SSD1325 128x64"
    cs_pin: GPIO15
    dc_pin: GPIO16
    reset_pin: GPIO17
    update_interval: 200ms
    lambda: |-
      auto mode = id(apply_mode_timeout).is_running() ? id(soft_mode) : id(tstat).mode;
      auto fan_mode = id(apply_fan_mode_timeout).is_running() ? id(soft_fan_mode) : id(tstat).fan_mode;
      auto temp = id(apply_set_temp_timeout).is_running() ? id(soft_set_temp) : id(tstat).target_temperature_low + 1.11111111111;
      temp = (temp * 1.8) + 32;

      it.printf(it.get_width() / 2, 0, id(font6), TextAlign::TOP_CENTER, "%s - %s", climate_mode_to_string(mode), climate_action_to_string(id(tstat).action));

      it.printf((it.get_width() / 2) + 3, 14, id(font12), TextAlign::TOP_CENTER, "%.1f°", (id(bme280_temp).state * 1.8) + 32);

      it.printf(it.get_width() / 2, 54, id(font6), TextAlign::TOP_CENTER, "%.1f", temp);
      if (id(apply_set_temp_timeout).is_running()) {
        // TODO: draw cool image

        // draw low temp
        it.printf(3, 54, id(font6), "%.1f", temp - 2);

        // draw high temp
        it.printf(it.get_width() - 3, 54, id(font6), TextAlign::TOP_RIGHT, "%.1f", temp + 2);
      } else {

        // draw time
        it.strftime(3, 54, id(font6), "%H:%M", id(esptime).now());

        // draw humidity
        it.printf(it.get_width() - 3, 54, id(font6), TextAlign::TOP_RIGHT, "%.1f%%", id(bme280_humid).state);
      }


mcp23017:
  - id: mcp23017_hub
    address: 0x20

switch:
  - platform: gpio
    id: mcp23017_reset
    internal: true
    restore_mode: ALWAYS_OFF
    pin:
      number: 4
      mode: OUTPUT
      inverted: true

    # Fan G green wire
  - platform: gpio
    id: triac_G
    internal: true
    pin:
      mcp23xxx: mcp23017_hub
      number: 0
      mode: OUTPUT

    # Compressor Y1 yellow wire
  - platform: gpio
    id: triac_Y1
    internal: true
    pin:
      mcp23xxx: mcp23017_hub
      number: 1
      mode: OUTPUT

    # Reversing valve O/C orange wire, on for cooling
  - platform: gpio
    id: triac_Y2
    internal: true
    pin:
      mcp23xxx: mcp23017_hub
      number: 2
      mode: OUTPUT

    # Aux heat W1 white wire
  - platform: gpio
    id: triac_W1
    internal: true
    pin:
      mcp23xxx: mcp23017_hub
      number: 3
      mode: OUTPUT

climate:
  - platform: thermostat
    id: tstat
    name: ${node_friendly_name}
    sensor: bme280_temp
    hysteresis: 0.555555555555556
    visual:
      min_temperature: 55°F
      max_temperature: 92°F
      temperature_step: 1
    default_target_temperature_low: 68°F # must be 4° apart to keep gui simple
    default_target_temperature_high: 72°F
    cool_action:
      - switch.turn_on:  triac_G  # fan
      - switch.turn_on:  triac_Y1 # compressor
      - switch.turn_on:  triac_Y2 # rev valve
      - switch.turn_off: triac_W1 # em heat
    heat_action:
      - switch.turn_on:  triac_G  # fan
      - switch.turn_on:  triac_Y1 # compressor
      - switch.turn_off: triac_Y2 # rev valve
      - switch.turn_off: triac_W1 # em heat
    idle_action:
      - switch.turn_off: triac_G  # fan
      - switch.turn_off: triac_Y1 # compressor
      - switch.turn_off: triac_Y2 # rev valve
      - switch.turn_off: triac_W1 # em heat
    fan_only_action:
      - switch.turn_on:  triac_G  # fan
      - switch.turn_off: triac_Y1 # compressor
      - switch.turn_off: triac_Y2 # rev valve
      - switch.turn_off: triac_W1 # em heat

globals:
  - id: soft_mode
    type: climate::ClimateMode
  - id: soft_fan_mode
    type: climate::ClimateFanMode
  - id: soft_set_temp
    type: float

script:
  - id: toggle_mode
    then:
      - lambda: |-
          auto mode = id(apply_mode_timeout).is_running() ? id(soft_mode) : id(tstat).mode;
          switch(mode) {
            case CLIMATE_MODE_OFF:
              id(soft_mode) = CLIMATE_MODE_AUTO;
              break;
            case CLIMATE_MODE_AUTO:
              id(soft_mode) = CLIMATE_MODE_COOL;
              break;
            case CLIMATE_MODE_COOL:
              id(soft_mode) = CLIMATE_MODE_HEAT;
              break;
            default:
              id(soft_mode) = CLIMATE_MODE_OFF;
          }
      - script.execute: apply_mode_timeout

  - id: apply_mode_timeout
    mode: restart
    then:
      - delay: 2500ms
      - lambda: |-
          id(tstat).mode = id(soft_mode);
          id(tstat).refresh();
      - component.update: oled

  - id: toggle_fan_mode
    then:
      - lambda: |-
          auto fan_mode = id(apply_fan_mode_timeout).is_running() ? id(tstat).fan_mode : id(soft_fan_mode);
          switch(fan_mode) {
            case CLIMATE_FAN_AUTO:
              id(soft_fan_mode) = CLIMATE_FAN_ON;
              break;
            default:
              id(soft_fan_mode) = CLIMATE_FAN_AUTO;
          }
      - script.execute: apply_fan_mode_timeout

  - id: apply_fan_mode_timeout
    mode: restart
    then:
      - delay: 2500ms
      - lambda: |-
          id(tstat).fan_mode = id(soft_fan_mode);
          id(tstat).refresh();
      - component.update: oled

  - id: raise_set_temp
    then:
      - lambda: |-
          // TODO: rules?
          auto temp = id(apply_set_temp_timeout).is_running() ? 
            id(soft_set_temp) : (id(tstat).target_temperature_low + 1.11111111111);
          id(soft_set_temp) = temp + 0.55555555556;
          ESP_LOGD("tstat", "%.1f° to %.1f°", temp, id(soft_set_temp));
      - script.execute: apply_set_temp_timeout

  - id: lower_set_temp
    then:
      - lambda: |-
          // TODO: rules?
          auto temp = id(apply_set_temp_timeout).is_running() ? 
            id(soft_set_temp) : (id(tstat).target_temperature_low + 1.11111111111);
          id(soft_set_temp) = temp - 0.55555555556;
          ESP_LOGD("tstat", "%.1f° to %.1f°", temp, id(soft_set_temp));
      - script.execute: apply_set_temp_timeout

  - id: apply_set_temp_timeout
    mode: restart
    then:
      - delay: 2500ms
      - lambda: |-
          // round to exact F degrees
          auto tempF = (id(soft_set_temp) * 1.8) + 32;
          tempF = roundf(tempF);
          id(soft_set_temp) = (tempF - 32) * 0.55555555556;
          ESP_LOGD("tstat", "%.1f°C - %.1f°F", id(soft_set_temp), tempF);

          id(tstat).target_temperature_low = id(soft_set_temp) - 1.11111111111;
          id(tstat).target_temperature_high = id(soft_set_temp) + 1.11111111111;
          id(tstat).refresh();
      - component.update: oled