esphome:
  name: ${node_name}
  platform: ESP32
  board: featheresp32
  on_boot:
    then:
      - script.execute: startup_delay
      - script.execute: display_on

logger:

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

api:
  id: esp_api
  password: !secret api_password

ota:
  password: !secret ota_password

status_led:
  pin:
    number: GPIO5
    inverted: true

time:
  - platform: homeassistant
    id: esp_time
    timezone: America/Chicago

i2c:
  id: i2c_bus
  frequency: 400kHz
  sda: 21
  scl: 22
  scan: True

spi:
  clk_pin: GPIO14
  mosi_pin: GPIO13
  miso_pin: GPIO12

binary_sensor:
  - platform: gpio
    id: mode_button
    internal: true
    pin:
      number: GPIO0
      inverted: true
    on_click:
      min_length: 50ms
      max_length: 500ms
      then:
        - script.execute: toggle_fan_mode
        - component.update: oled

  - platform: gpio
    id: encoder_button
    internal: true
    pin:
      number: GPIO2
      inverted: true
    on_click:
      min_length: 50ms
      max_length: 500ms
      then:
        - script.execute: toggle_mode
        - component.update: oled

  - platform: gpio
    id: pir_motion
    name: ${node_friendly_name} Motion Detection
    pin:
      number: GPIO27
    on_state:
      then:
        - script.execute: display_on

sensor:
  - platform: rotary_encoder
    id: encoder
    internal: true
    pin_a: GPIO18
    pin_b: GPIO19
    on_clockwise:
      - script.execute: raise_set_temp
      - component.update: oled
    on_anticlockwise:
      - script.execute: lower_set_temp
      - component.update: oled

  - platform: adc
    id: phototransistor
    name: ${node_friendly_name} Phototransistor ADC
    pin: 32
    attenuation: 11db
    update_interval: 1s
    filters:
      - sliding_window_moving_average:
          window_size: 5
          send_every: 3
          send_first_at: 1
    on_value:
      then:
        - lambda: |-
            const float brightness = id(phototransistor).state / 3.9;
            id(oled)->set_brightness(brightness);
            
  - platform: bme280
    address: 0x76
    temperature:
      id: bme280_temp
      name: ${node_friendly_name} BME280 Temperature
    humidity:
      id: bme280_humid
      name: ${node_friendly_name} BME280 Humidity
    pressure:
      id: bme280_press
      name: ${node_friendly_name} BME280 Pressure
    update_interval: 30s
    
  - platform: shtcx
    temperature:
      id: shtcx_temp
      name: ${node_friendly_name} SHTC3 Temperature
      filters:
      - offset: -1.6
    humidity:
      id: shtcx_humid
      name: ${node_friendly_name} SHTC3 Humidity
    update_interval: 30s

font:
  # - file: "resources/Helvetica.ttf"
  #   id: font_lg
  #   size: 16
  - file: "resources/PressStart2P.ttf"
    id: font12
    size: 16
  - file: "resources/PressStart2P.ttf"
    id: font6
    size: 8

color:
  - id: medium_gray
    white: 50%

image:
  - file: "resources/splash.png"
    id: splash
    resize: 128x21
  - file: "resources/hass_online.png"
    id: hass_online
    resize: 16x14
  - file: "resources/hass_offline.png"
    id: hass_offline
    resize: 16x14
  - file: "resources/set_temp.png"
    id: set_temp
    resize: 128x7
  - file: "resources/mode1.png"
    id: mode_auto
    resize: 128x13
  - file: "resources/mode2.png"
    id: mode_cool
    resize: 128x13
  - file: "resources/mode3.png"
    id: mode_heat
    resize: 128x13
  - file: "resources/mode4.png"
    id: mode_off
    resize: 128x13
  - file: "resources/bar1.png"
    id: bar1
    resize: 128x9
  - file: "resources/bar2.png"
    id: bar2
    resize: 128x9
  - file: "resources/bar3.png"
    id: bar3
    resize: 128x9
  - file: "resources/bar4.png"
    id: bar4
    resize: 128x9
  - file: "resources/bar5.png"
    id: bar5
    resize: 128x9
  - file: "resources/bar6.png"
    id: bar6
    resize: 128x9
  - file: "resources/bar7.png"
    id: bar7
    resize: 128x9
  - file: "resources/bar8.png"
    id: bar8
    resize: 128x9

display:
  - platform: ssd1325_spi
    id: oled
    model: "SSD1325 128x64"
    cs_pin: GPIO15
    dc_pin: ${oled_dc_pin}
    reset_pin: ${oled_reset_pin}
    update_interval: 1s
    lambda: |-

      // draw boot screen
      if (id(startup_delay).is_running()) {
        it.image(0, 20, id(splash), COLOR_OFF, COLOR_ON);
        it.print((it.get_width() / 2), 52, id(font6), TextAlign::TOP_CENTER, "2021.3.2");
        return;
      }

      auto mode = id(apply_mode_timeout).is_running() ? id(soft_mode) : id(tstat).mode;
      auto fan_mode = id(apply_fan_mode_timeout).is_running() ? id(soft_fan_mode) : id(tstat).fan_mode;
      auto temp = id(apply_set_temp_timeout).is_running() ? id(soft_set_temp) : id(tstat).target_temperature_low + 1.11111111111;

      // do calcs as F degrees
      temp = (temp * 1.8) + 32;
      auto low = temp - 2;
      auto high = temp + 2;

      auto curTemp = (id(shtcx_temp).state * 1.8) + 32;

      const size_t status_string_size = 30;
      char  status_string[status_string_size];

      if (id(apply_mode_timeout).is_running()) {

        auto modeImage = mode == CLIMATE_MODE_AUTO ? id(mode_auto) :
          mode == CLIMATE_MODE_COOL ? id(mode_cool) :
          mode == CLIMATE_MODE_HEAT ? id(mode_heat) :
          id(mode_off);

        it.image(0, 0, modeImage, COLOR_OFF, COLOR_ON);

      } else {
        switch (id(tstat).action) {
          case CLIMATE_ACTION_OFF:
          case CLIMATE_ACTION_IDLE:
            switch (mode) {
              case CLIMATE_MODE_OFF:
                snprintf(status_string, status_string_size, "Off");
                break;

              case CLIMATE_MODE_AUTO:
                snprintf(status_string, status_string_size, "Auto");
                break;

              case CLIMATE_MODE_COOL:
                snprintf(status_string, status_string_size, "Cool");
                break;

              case CLIMATE_MODE_HEAT:
                snprintf(status_string, status_string_size, "Heat");
                break;

              default:
                snprintf(status_string, status_string_size, "Unexpected mode");

            }
            break;

          case CLIMATE_ACTION_COOLING:
            snprintf(status_string, status_string_size, "Cooling");
            break;

          case CLIMATE_ACTION_HEATING:
            snprintf(status_string, status_string_size, "Heating");
            break;
          
          default:
            snprintf(status_string, status_string_size, "Unexpected action");
        }
      }
      // climate_mode_to_string(mode), climate_action_to_string(id(tstat).action)
      it.printf(it.get_width() / 2, 2, id(font6), TextAlign::TOP_CENTER, "%s", status_string);

      it.printf((it.get_width() / 2) + 3, 15, id(font12), TextAlign::TOP_CENTER, "%.1f°", curTemp);

      it.rectangle(48, 33, 32, 13, COLOR_ON);
      it.printf(it.get_width() / 2, 36, id(font6), TextAlign::TOP_CENTER, "%.0f", temp);

      if (id(apply_set_temp_timeout).is_running()) {

        it.image(0, 47, id(set_temp), COLOR_OFF, COLOR_ON);

        // draw cool bar
        static Image* bars[]={id(bar1),id(bar2),id(bar3),id(bar4),id(bar5),id(bar6),id(bar7),id(bar8)};
        int encoderVal = (int)id(encoder).state;
        int barIndex = encoderVal >= 0 ? encoderVal % 8 : (8 - abs(encoderVal % 8)) % 8;
        it.image(0, 55, bars[barIndex], COLOR_OFF, COLOR_ON);

        // draw low temp
        it.printf(0, 56, id(font6), "%.0f", temp - 2);

        // draw high temp
        it.printf(it.get_width()+1, 56, id(font6), TextAlign::TOP_RIGHT, "%.0f", temp + 2);
      } else {

        if (id(esp_api).is_connected()) {

          it.image(3, 50, id(hass_online), COLOR_OFF, COLOR_ON);

          // draw time
          it.strftime(it.get_width() / 2, 54, id(font6), TextAlign::TOP_CENTER, "%H:%M", id(esp_time).now());
        } else {
          it.image(3, 50, id(hass_offline), COLOR_OFF, COLOR_ON);
        }

        // draw humidity
        it.printf(it.get_width(), 54, id(font6), TextAlign::TOP_RIGHT, "%.0f%%", id(shtcx_humid).state);
      }


mcp23017:
  - id: mcp23017_hub
    address: 0x20

switch:
  - platform: gpio
    id: mcp23017_reset
    internal: true
    restore_mode: ALWAYS_OFF
    pin:
      number: 4
      mode: OUTPUT
      inverted: true

    # Fan G green wire
  - platform: gpio
    id: triac_G
    internal: true
    pin:
      mcp23xxx: mcp23017_hub
      number: 0
      mode: OUTPUT

    # Compressor Y1 yellow wire
  - platform: gpio
    id: triac_Y1
    internal: true
    pin:
      mcp23xxx: mcp23017_hub
      number: 1
      mode: OUTPUT

    # Reversing valve O/C orange wire, on for cooling
  - platform: gpio
    id: triac_Y2
    internal: true
    pin:
      mcp23xxx: mcp23017_hub
      number: 2
      mode: OUTPUT

    # NOTE: triac_Y2 pin number 2 not working on wroom board

    # Aux heat W1 white wire
  - platform: gpio
    id: triac_W1
    internal: true
    pin:
      mcp23xxx: mcp23017_hub
      number: 3
      mode: OUTPUT

    # NOTE: triac_W2 pin number 4 not working on both boards

climate:
  - platform: thermostat
    id: tstat
    name: ${node_friendly_name}
    sensor: shtcx_temp
    hysteresis: 0.555555555555556
    visual:
      min_temperature: 55°F
      max_temperature: 92°F
      temperature_step: 1
    default_target_temperature_low: 68°F # must be 4° apart to keep gui simple
    default_target_temperature_high: 72°F
    cool_action:
      - switch.turn_on:  triac_G  # fan
      - switch.turn_on:  triac_Y1 # compressor
      - switch.turn_on:  triac_Y2 # rev valve
      - switch.turn_off: triac_W1 # em heat
    heat_action:
      - switch.turn_on:  triac_G  # fan
      - switch.turn_on:  triac_Y1 # compressor
      - switch.turn_off: triac_Y2 # rev valve
      - switch.turn_off: triac_W1 # em heat
    idle_action:
      - switch.turn_off: triac_G  # fan
      - switch.turn_off: triac_Y1 # compressor
      - switch.turn_off: triac_Y2 # rev valve
      - switch.turn_off: triac_W1 # em heat
    fan_only_action:
      - switch.turn_on:  triac_G  # fan
      - switch.turn_off: triac_Y1 # compressor
      - switch.turn_off: triac_Y2 # rev valve
      - switch.turn_off: triac_W1 # em heat

globals:
  - id: soft_mode
    type: climate::ClimateMode
  - id: soft_fan_mode
    type: climate::ClimateFanMode
  - id: soft_set_temp
    type: float

script:
  - id: startup_delay
    then:
      - delay: 5s

  - id: display_on
    mode: restart
    then:
      - lambda: 'id(oled)->turn_on();'
      - delay: 30s
      - lambda: 'id(oled)->turn_off();'

  - id: toggle_mode
    then:
      - script.execute: display_on
      - lambda: |-
          auto mode = id(apply_mode_timeout).is_running() ? id(soft_mode) : id(tstat).mode;
          switch(mode) {
            case CLIMATE_MODE_OFF:
              id(soft_mode) = CLIMATE_MODE_AUTO;
              break;
            case CLIMATE_MODE_AUTO:
              id(soft_mode) = CLIMATE_MODE_COOL;
              break;
            case CLIMATE_MODE_COOL:
              id(soft_mode) = CLIMATE_MODE_HEAT;
              break;
            default:
              id(soft_mode) = CLIMATE_MODE_OFF;
          }
      - script.execute: apply_mode_timeout

  - id: apply_mode_timeout
    mode: restart
    then:
      - delay: 2500ms
      - lambda: |-
          id(tstat).mode = id(soft_mode);
          id(tstat).refresh();
      - component.update: oled

  - id: toggle_fan_mode
    then:
      - script.execute: display_on
      - lambda: |-
          auto fan_mode = id(apply_fan_mode_timeout).is_running() ? id(tstat).fan_mode : id(soft_fan_mode);
          switch(fan_mode) {
            case CLIMATE_FAN_AUTO:
              id(soft_fan_mode) = CLIMATE_FAN_ON;
              break;
            default:
              id(soft_fan_mode) = CLIMATE_FAN_AUTO;
          }
      - script.execute: apply_fan_mode_timeout

  - id: apply_fan_mode_timeout
    mode: restart
    then:
      - delay: 2500ms
      - lambda: |-
          id(tstat).fan_mode = id(soft_fan_mode);
          id(tstat).refresh();
      - component.update: oled

  - id: raise_set_temp
    then:
      - script.execute: display_on
      - lambda: |-
          // TODO: rules?
          auto temp = id(apply_set_temp_timeout).is_running() ? 
            id(soft_set_temp) : (id(tstat).target_temperature_low + 1.11111111111);
          id(soft_set_temp) = temp + 0.55555555556;
          ESP_LOGD("tstat", "%.1f° to %.1f°", temp, id(soft_set_temp));
      - script.execute: apply_set_temp_timeout

  - id: lower_set_temp
    then:
      - script.execute: display_on
      - lambda: |-
          // TODO: rules?
          auto temp = id(apply_set_temp_timeout).is_running() ? 
            id(soft_set_temp) : (id(tstat).target_temperature_low + 1.11111111111);
          id(soft_set_temp) = temp - 0.55555555556;
          ESP_LOGD("tstat", "%.1f° to %.1f°", temp, id(soft_set_temp));
      - script.execute: apply_set_temp_timeout

  - id: apply_set_temp_timeout
    mode: restart
    then:
      - delay: 2500ms
      - lambda: |-
          // round to exact F degrees
          auto tempF = (id(soft_set_temp) * 1.8) + 32;
          tempF = roundf(tempF);
          id(soft_set_temp) = (tempF - 32) * 0.55555555556;
          ESP_LOGD("tstat", "%.1f°C - %.1f°F", id(soft_set_temp), tempF);

          id(tstat).target_temperature_low = id(soft_set_temp) - 1.11111111111;
          id(tstat).target_temperature_high = id(soft_set_temp) + 1.11111111111;
          id(tstat).refresh();
      - component.update: oled