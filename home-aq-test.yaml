
#gpio21 zmod_reset
#gpio 19 zmod_int0
#gpio 18 zmod_int1
#gpio5 dustpwr
#gpio17 neopixel
#gpio16 dusttx
#gpio4 dustrx

substitutions:
  display_name: home-aq-test

esphome:
  name: home-aq-test
  platform: ESP32
  board: featheresp32  
  # includes:
  #   - sngcja5.h

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

api:
  id: esp_api
  password: !secret api_password

ota:
  password: !secret ota_password

# captive_portal:

web_server:
  port: 80

logger:

i2c:
  id: i2c_bus
  frequency: 400kHz
  sda: 23
  scl: 22
  scan: True

# switch:
#   - platform: gpio
#     name: "Honeywell HPMA115C0 Power"
#     pin: 5

#   - platform: gpio
#     name: "Renesas ZMOD INT0"
#     pin:
#       number: 19
#       inverted: True #?
#       mode: INPUT_PULLUP #?

#   - platform: gpio
#     name: "Renesas ZMOD INT1"
#     pin:
#       number: 18
#       inverted: True #?
#       mode: INPUT_PULLUP #?

bme680_bsec:
    address: 0x77
    temperature_offset: -4.8

# sensor:
#   - platform: custom
#     lambda: |-
#       auto sngcja5 = new Sngcja5Component(15000);
#       App.register_component(sngcja5);
#       return {sngcja5->pm1_sensor, sngcja5->pm2_5_sensor,  sngcja5->pm10_sensor};
#     sensors:
#       - name: ${display_name} PM <1
#         unit_of_measurement: "μg/m³"
#         icon: "mdi:vanish"
#       - name: ${display_name} PM <2.5
#         unit_of_measurement: "μg/m³"
#         icon: "mdi:vanish"
#       - name: ${display_name} PM <10
#         unit_of_measurement: "μg/m³"
#         icon: "mdi:vanish"

  - platform: sgp40
    name: ${display_name} VOC Index
    compensation:
      temperature_source: bme680_temp
      humidity_source: bme680_humid
    store_baseline: True
    update_interval: 60s

  - platform: bme680_bsec
    temperature:
      id: bme680_temp
      name: ${display_name} Temperature
      filters:
        - median
    pressure:
      name: ${display_name} Pressure
      filters:
        - median
    humidity:
      id: bme680_humid
      name: ${display_name} Humidity
      filters:
        - median
    gas_resistance:
      name: ${display_name} Gas Resistance
      filters:
        - median
    iaq:
      name: ${display_name} IAQ
      filters:
        - median
    iaq_accuracy: # numeric value of 0, 1, 2, 3      
      name: ${display_name} Numeric IAQ Accuracy
    co2_equivalent: # estimate in ppm      
      name: ${display_name} CO2 Equivalent
      filters:
        - median
    breath_voc_equivalent: # estimate in ppm      
      name: ${display_name} Breath VOC Equivalent
      filters:
        - median

text_sensor:
  - platform: bme680_bsec
    iaq_accuracy: # Stabilizing, Uncertain, Calibrating, Calibrated
      name: ${display_name} IAQ Accuracy
      

# - platform: template
#     name: "Kitchen Humidity"
#     id: govee1_humidity
#     unit_of_measurement: '%'
#     icon: "mdi:water-percent"
#   - platform: template
#     name: "Kitchen Temperature"
#     id: govee1_temperature
#     unit_of_measurement: '°C'
#     icon: "mdi:thermometer"
#   - platform: template
#     name: "Kitchen Battery"
#     id: govee1_battery
#     unit_of_measurement: '%'
#     icon: "mdi:battery"

esp32_ble_tracker:
  on_ble_advertise:
    - mac_address: A4:C1:38:11:22:33 #update to your govee device mac address
      then:
        - lambda: |-
            ESP_LOGD("ble_adv", "New BLE device");
            ESP_LOGD("ble_adv", "  address: %s", x.address_str().c_str());
            ESP_LOGD("ble_adv", "  name: %s", x.get_name().c_str());
            ESP_LOGD("ble_adv", "  Advertised service UUIDs:");
            for (auto uuid : x.get_service_uuids()) {
                ESP_LOGD("ble_adv", "    service uuid %s", uuid.to_string().c_str());
            }
            ESP_LOGD("ble_adv", "  Advertised service data:");
            for (auto data : x.get_service_datas()) {
                ESP_LOGD("ble_adv", "    service data uuid - %s: (length %i)", data.uuid.to_string().c_str(), data.data.size());
            }
            ESP_LOGD("ble_adv", "  Advertised manufacturer data:");
            for (auto data : x.get_manufacturer_datas()) {
                ESP_LOGD("ble_adv", "    mfg data uuid %s: (length %i)", data.uuid.to_string().c_str(), data.data.size());
            }

# - mac_address: A4:C1:38:AA:BB:CC #govee1
#       manufacturer_id: EC88
#       then:
#         - lambda: |-
#             const int basenum = (int16_t(x[1]) << 16) + (int16_t(x[2]) << 8) + int16_t(x[3]);
#             ESP_LOGD("ble_adv", "goveesensor basenum: (%d)", basenum);
#             const float temperature = basenum / 10000.0f;
#             const float humidity = (basenum % 1000) / 10.0f;
#             const float battery_level = uint16_t(x[4]) / 1.0f;
#             ESP_LOGD("ble_adv", "  Temperature: %.2f°C", temperature);
#             ESP_LOGD("ble_adv", "  Humidity: %.2f", humidity);
#             ESP_LOGD("ble_adv", "  Battery Level: %.0f percent", battery_level);
#             id(govee1_temperature).publish_state(temperature);
#             id(govee1_humidity).publish_state(humidity);
#             id(govee1_battery).publish_state(battery_level);

#renesas 4410

# light:
#   - platform: neopixelbus
#     type: GRB
#     pin: GPIO17
#     num_leds: 1
#     name: "NeoPixel Light"
